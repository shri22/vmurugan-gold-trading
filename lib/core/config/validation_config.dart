/// Configuration for validation modes in the application
/// This allows easy switching between demo and production validation
class ValidationConfig {
  // CONFIGURATION: Set validation mode
  static const ValidationMode mode = ValidationMode.demo; // Change to ValidationMode.production when ready
  
  // Demo configuration
  static const String demoOtp = '123456';
  static const Duration demoOtpExpiry = Duration(minutes: 5);
  static const bool showDemoOtpInUI = true; // Show OTP in UI for testing
  
  // Production configuration
  static const Duration productionOtpExpiry = Duration(minutes: 5);
  static const int otpLength = 6;
  static const int maxOtpAttempts = 3;
  static const Duration otpResendCooldown = Duration(seconds: 30);
  
  // Phone number validation
  static const String phoneNumberPattern = r'^[6-9]\d{9}$'; // Indian mobile numbers
  static const int phoneNumberLength = 10;
  
  // MPIN validation
  static const int mpinLength = 4;
  static const String mpinPattern = r'^\d{4}$';
  
  // PAN card validation
  static const String panCardPattern = r'^[A-Z]{5}[0-9]{4}[A-Z]{1}$';
  
  // Email validation
  static const String emailPattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$';
  
  // Name validation
  static const int minNameLength = 2;
  static const int maxNameLength = 50;
  static const String namePattern = r'^[a-zA-Z\s]+$';
  
  // Address validation
  static const int minAddressLength = 10;
  static const int maxAddressLength = 200;
  
  /// Get current validation mode
  static ValidationMode get currentMode => mode;
  
  /// Check if app is in demo mode
  static bool get isDemoMode => mode == ValidationMode.demo;
  
  /// Check if app is in production mode
  static bool get isProductionMode => mode == ValidationMode.production;
  
  /// Get OTP for current mode
  static String getOtp() {
    switch (mode) {
      case ValidationMode.demo:
        return demoOtp;
      case ValidationMode.production:
        // In production, OTP is generated by SMS service
        throw Exception('OTP should be generated by SMS service in production mode');
    }
  }
  
  /// Validate OTP based on current mode
  static bool validateOtp(String enteredOtp, String? generatedOtp) {
    if (enteredOtp.length != otpLength) {
      return false;
    }
    
    switch (mode) {
      case ValidationMode.demo:
        return enteredOtp == demoOtp;
      case ValidationMode.production:
        return generatedOtp != null && enteredOtp == generatedOtp;
    }
  }
  
  /// Validate phone number
  static bool validatePhoneNumber(String phone) {
    if (phone.length != phoneNumberLength) {
      return false;
    }
    return RegExp(phoneNumberPattern).hasMatch(phone);
  }
  
  /// Validate MPIN
  static bool validateMpin(String mpin) {
    if (mpin.length != mpinLength) {
      return false;
    }
    return RegExp(mpinPattern).hasMatch(mpin);
  }
  
  /// Validate PAN card
  static bool validatePanCard(String panCard) {
    return RegExp(panCardPattern).hasMatch(panCard.toUpperCase());
  }
  
  /// Validate email
  static bool validateEmail(String email) {
    return RegExp(emailPattern).hasMatch(email.toLowerCase());
  }
  
  /// Validate name
  static bool validateName(String name) {
    if (name.length < minNameLength || name.length > maxNameLength) {
      return false;
    }
    return RegExp(namePattern).hasMatch(name);
  }
  
  /// Validate address
  static bool validateAddress(String address) {
    return address.length >= minAddressLength && address.length <= maxAddressLength;
  }
  
  /// Get validation error message for phone number
  static String? getPhoneNumberError(String phone) {
    if (phone.isEmpty) {
      return 'Phone number is required';
    }
    if (phone.length != phoneNumberLength) {
      return 'Phone number must be $phoneNumberLength digits';
    }
    if (!validatePhoneNumber(phone)) {
      return 'Please enter a valid Indian mobile number';
    }
    return null;
  }
  
  /// Get validation error message for MPIN
  static String? getMpinError(String mpin) {
    if (mpin.isEmpty) {
      return 'MPIN is required';
    }
    if (mpin.length != mpinLength) {
      return 'MPIN must be $mpinLength digits';
    }
    if (!validateMpin(mpin)) {
      return 'MPIN must contain only numbers';
    }
    return null;
  }
  
  /// Get validation error message for PAN card
  static String? getPanCardError(String panCard) {
    if (panCard.isEmpty) {
      return 'PAN card is required';
    }
    if (!validatePanCard(panCard)) {
      return 'Please enter a valid PAN card number (e.g., ABCDE1234F)';
    }
    return null;
  }
  
  /// Get validation error message for email
  static String? getEmailError(String email) {
    if (email.isEmpty) {
      return 'Email is required';
    }
    if (!validateEmail(email)) {
      return 'Please enter a valid email address';
    }
    return null;
  }
  
  /// Get validation error message for name
  static String? getNameError(String name) {
    if (name.isEmpty) {
      return 'Name is required';
    }
    if (name.length < minNameLength) {
      return 'Name must be at least $minNameLength characters';
    }
    if (name.length > maxNameLength) {
      return 'Name must be less than $maxNameLength characters';
    }
    if (!validateName(name)) {
      return 'Name can only contain letters and spaces';
    }
    return null;
  }
  
  /// Get validation error message for address
  static String? getAddressError(String address) {
    if (address.isEmpty) {
      return 'Address is required';
    }
    if (address.length < minAddressLength) {
      return 'Address must be at least $minAddressLength characters';
    }
    if (address.length > maxAddressLength) {
      return 'Address must be less than $maxAddressLength characters';
    }
    return null;
  }
  
  /// Get configuration summary
  static Map<String, dynamic> getConfigSummary() {
    return {
      'mode': mode.toString(),
      'isDemoMode': isDemoMode,
      'isProductionMode': isProductionMode,
      'demoOtp': isDemoMode ? demoOtp : 'Hidden',
      'showDemoOtpInUI': showDemoOtpInUI,
      'otpLength': otpLength,
      'phoneNumberLength': phoneNumberLength,
      'mpinLength': mpinLength,
      'otpExpiry': isDemoMode ? demoOtpExpiry.inMinutes : productionOtpExpiry.inMinutes,
      'maxOtpAttempts': maxOtpAttempts,
      'otpResendCooldown': otpResendCooldown.inSeconds,
    };
  }
  
  /// Get mode description for UI display
  static String getModeDescription() {
    switch (mode) {
      case ValidationMode.demo:
        return 'Demo Mode - Using fixed OTP: $demoOtp';
      case ValidationMode.production:
        return 'Production Mode - Using SMS OTP service';
    }
  }
  
  /// Get instructions for switching to production
  static List<String> getProductionSwitchInstructions() {
    return [
      '1. Update ValidationConfig.mode to ValidationMode.production',
      '2. Configure SMS service in SmsConfig',
      '3. Update server environment variables',
      '4. Test OTP delivery with real phone numbers',
      '5. Update Firebase configuration if using Firebase Auth',
      '6. Verify all validation rules are appropriate for production',
    ];
  }
}

/// Validation modes supported by the application
enum ValidationMode {
  demo,       // Fixed OTP for testing
  production, // Real SMS OTP service
}

/// Extension to get display names for validation modes
extension ValidationModeExtension on ValidationMode {
  String get displayName {
    switch (this) {
      case ValidationMode.demo:
        return 'Demo Mode';
      case ValidationMode.production:
        return 'Production Mode';
    }
  }
  
  String get description {
    switch (this) {
      case ValidationMode.demo:
        return 'Uses fixed OTP for testing and development';
      case ValidationMode.production:
        return 'Uses real SMS service for OTP delivery';
    }
  }
}
